// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())

  email String @unique
  password String
  nickname String
  classOf String
  imageURL String?
  phoneNumber String @db.Char(11)

  campersId String
  campers Campers @relation(fields: [campersId],references: [id])

  reviewLikes ReviewLike[]
  wishLists WishList[]
  refreshToken RefreshToken?
  reviews Review[]
  inquirys Inquiry[]
}

model Inquiry{
  id String @id @default(uuid())
  
  title String @db.VarChar(30)
  content String @db.Text
  status Inquiry_Status

  userId String
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade) 
  
  inquiryImages InquiryImage[]
  inquiryResponse InquiryResponse?
}

// WAITING: 답변대기, DONE: 답변완료
enum Inquiry_Status {
  WAITING
  DONE
}

model InquiryImage {
  id String @id @default(uuid())

  imageUrl String @db.LongText

  inquiryId String
  inquiry Inquiry @relation(fields: [inquiryId], references: [id], onUpdate: Cascade, onDelete: Cascade) 
}

model InquiryResponse {
  id String @id @default(uuid())

  content String @db.Text

  inquiryId String @unique
  inquiry Inquiry @relation(fields: [inquiryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Campers{
  id String @id @default(uuid())

  name String @db.VarChar(10)
  x Float @db.Double
  y Float @db.Double

  universityId String
  university University @relation(fields: [universityId],references: [id])
  
  users User[]
  stores Store[]
}

model University{
  id String @id @default(uuid())

  name String @db.VarChar(10) @unique

  campers Campers[]
}

model Store{
  id String @id @default(uuid())

  name String @db.VarChar(100)
  address String
  phoneNumber String @db.Char(11)
  x Float @db.Double
  y Float @db.Double
  distance Float @db.Double
  campersId String
  campers Campers @relation(fields: [campersId], references: [ id])
  categoryId String
  category Category @relation(fields: [categoryId], references: [ id])

  wishLists WishList[]
  storeImage StoreImage?
  keywords Keyword[]
  reviews Review[]
  businessHour BusinessHour?
}

model BusinessHour{
  storeId String @unique
  store Store @relation(fields: [storeId],references: [id]) 

  monOpen DateTime @db.Time()
  monClose DateTime @db.Time()
  tueOpen DateTime @db.Time()
  tueClose DateTime @db.Time()
  wedOpen DateTime @db.Time()
  wedClose DateTime @db.Time()
  thuOpen DateTime @db.Time()
  thuClose DateTime @db.Time()
  friOpen DateTime @db.Time()
  friClose DateTime @db.Time()
  satOpen DateTime @db.Time()
  satClose DateTime @db.Time()
  sunOpen DateTime @db.Time()
  sunClose DateTime @db.Time()
}

model Review{
  id String @id @default(uuid())

  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime
  score Float @db.Double

  storeId String
  store Store @relation(fields: [storeId],references: [id])
  userId String
  user User @relation(fields: [userId],references: [id])

  reviewLikes ReviewLike[]
  reviewImages ReviewImage[]
  tags Tag[]
}

model ReviewLike{
  userId String
  user User @relation(fields: [userId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  reviewId String
  review Review @relation(fields: [reviewId],references: [id],onUpdate: Cascade,onDelete: Cascade) 

  @@id([userId,reviewId])
}

model Category{
  id String @id @default(uuid())

  name String @db.VarChar(20)

  stores Store[]
}

model WishList{
  userId String 
  user User @relation(fields: [userId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  storeId String
  store Store @relation(fields: [storeId],references: [id],onUpdate: Cascade,onDelete: Cascade)

  @@id([userId,storeId])
}

model StoreImage{
  id String @id @default(uuid())

  imageUrl String @db.LongText

  storeId String @unique
  store Store @relation(fields: [storeId],references: [id],onUpdate: Cascade,onDelete: Cascade)
  
}

model ReviewImage{
  id String @id @default(uuid())

  imageUrl String @db.LongText

  reviewId String
  review Review @relation(fields: [reviewId],references: [id],onUpdate: Cascade,onDelete: Cascade)
}

model Keyword{
  id String @id @default(uuid())

  keyword String @db.VarChar(100)
  
  storeId String
  store Store @relation(fields: [storeId],references: [id],onUpdate: Cascade,onDelete: Cascade)
}

model Tag{
  id String @id @default(uuid())

  name String @db.VarChar(50)

  reviewId String
  review Review @relation(fields: [reviewId],references: [id],onUpdate: Cascade,onDelete: Cascade)
}

model RefreshToken{
  id String @id @default(uuid())

  refreshToken String @db.VarChar(200)

  userId String @unique
  user User @relation(fields: [userId],references: [id],onUpdate: Cascade,onDelete: Cascade) 
}

model Notices{
  id String @id @default(uuid())

  title String @db.VarChar(50)
  content String @db.LongText
  createdAt DateTime @default(now())
  type Type
}

// NOTICE: 공지사항, FAQ: FAQ, TERMS: 이용시 약관
enum Type {
  NOTICE
  FAQ
  TERMS
}